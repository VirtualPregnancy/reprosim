
project(ReprosimPythonBindings LANGUAGES C)

set(ADDITIONAL_GENERATED_FILES)
# SWIG has already been found at this point.
include(${SWIG_USE_FILE})

set(PYTHONLIBS_SWIG_FLAGS -relativeimport)

set(INTERFACE_SRCS
  ../interface/arrays.i
  ../interface/diagnostics.i
  ../interface/geometry.i
  ../interface/indices.i
  ../interface/pressure_resistance_flow.i
  ../interface/repro_exports.i
)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../c)

# Put the Intermediary files generated by SWIG into their own directory.
set(_SWIG_GENERATED_INTERMEDIARIES_FILES_DIR ${CMAKE_CURRENT_BINARY_DIR}/swig_intermediaries)

# Set the location of the Python package files and directories.
set(PYTHON_PACKAGE_DIR ${CMAKE_CURRENT_BINARY_DIR}${CONFIG_DIR_SUFFIX}/reprosim)
set(PYTHON_SETUP_FILE_DESTINATION "${CMAKE_CURRENT_BINARY_DIR}${CONFIG_DIR_SUFFIX}/setup.py")
set(PYTHON_PACKAGE_INIT_FILE_DESTINATION "${PYTHON_PACKAGE_DIR}/__init__.py")

set(CMAKE_SWIG_FLAGS ${PYTHONLIBS_SWIG_FLAGS})
set(SETUP_PY_PACKAGE_FILES "'\${TARGET_FILE_NAME_reprosim_c}'")

set(FINALISE_PYTHON_BINDINGS_ARGUMENTS -DPYTHON_SETUP_FILE_DESTINATION=${PYTHON_SETUP_FILE_DESTINATION})
list(APPEND FINALISE_PYTHON_BINDINGS_ARGUMENTS -DTARGET_FILE_NAME_reprosim_c=$<TARGET_FILE_NAME:reprosim_c>)

set(MODULE_TARGETS)
foreach(SWIG_INTERFACE ${INTERFACE_SRCS})
  get_filename_component(MODULE_NAME ${SWIG_INTERFACE} NAME_WE)
  swig_add_library(${MODULE_NAME} LANGUAGE python SOURCES ${SWIG_INTERFACE}
    OUTPUT_DIR ${PYTHON_PACKAGE_DIR}
    OUTFILE_DIR ${_SWIG_GENERATED_INTERMEDIARIES_FILES_DIR}
  )
  
  # The Python debug libraries on windows also require the Python release libraries
  # (this appears to be the case for the libraries built with Visual Studio 14 2015),
  # so we add the release libraries here for all platforms.  This probably means that
  # when we try and link to the debug version of the Python libraires on OSX and GNU/Linux 
  # we will not succeed.  But as this is rarely done it hopefully won't become an issue.
  swig_link_libraries(${MODULE_NAME} ${PYTHON_LIBRARY_RELEASE} reprosim_c Python::Module Python::NumPy)
  set(MODULE_TARGET ${SWIG_MODULE_${MODULE_NAME}_REAL_NAME})
  set_target_properties(${MODULE_TARGET} PROPERTIES
    LIBRARY_OUTPUT_DIRECTORY ${PYTHON_PACKAGE_DIR}
    RUNTIME_OUTPUT_DIRECTORY ${PYTHON_PACKAGE_DIR}
    FOLDER bindings/python
    C_VISIBILITY_PRESET hidden
    VISIBILITY_INLINES_HIDDEN 1)
  list(APPEND MODULE_TARGETS ${MODULE_TARGET})

  if (MSVC)
    if (${PYTHON_LIBRARY_DEBUG})
      # Again from the above comment we need the debug Python library and release Python library when
      # linking with link.exe on Windows.
      target_link_libraries(${MODULE_TARGET} $<$<CONFIG:Debug>:PYTHON_LIBRARY_DEBUG>)
    else()
      # Disable use of Debug Python libraries when not available and using MSVC.
      # See http://stackoverflow.com/questions/11311877/creating-a-dll-from-a-wrapped-cpp-file-with-swig
      target_compile_definitions(${MODULE_TARGET} PRIVATE $<$<CONFIG:Debug>:SWIG_PYTHON_INTERPRETER_NO_DEBUG>)
    endif()
    set_target_properties(${MODULE_TARGET} PROPERTIES
      LIBRARY_OUTPUT_DIRECTORY_DEBUG ${PYTHON_PACKAGE_DIR}
      LIBRARY_OUTPUT_DIRECTORY_RELEASE ${PYTHON_PACKAGE_DIR})
  endif()

  list(APPEND SETUP_PY_PACKAGE_FILES "'\${TARGET_FILE_NAME_${MODULE_TARGET}}'")
  list(APPEND FINALISE_PYTHON_BINDINGS_ARGUMENTS -DTARGET_FILE_NAME_${MODULE_TARGET}=$<TARGET_FILE_NAME:${MODULE_TARGET}>)
endforeach()

add_custom_target(pybindings ALL)
add_dependencies(pybindings ${MODULE_TARGETS})

set(SETUP_PY_PACKAGE_FILES_STR "${SETUP_PY_PACKAGE_FILES}")
string(REPLACE ";" ", " SETUP_PY_PACKAGE_FILES_STR "${SETUP_PY_PACKAGE_FILES_STR}")
set(SETUP_PRE_GEN_PY_FILE "${CMAKE_CURRENT_BINARY_DIR}/pre_gen.setup.py")
configure_file(pre_setup.in.py ${SETUP_PRE_GEN_PY_FILE} @ONLY)

# Create the Python __init__.py file.
add_custom_command(
#  TARGET pybindings
  COMMAND ${CMAKE_COMMAND} -E touch ${PYTHON_PACKAGE_INIT_FILE_DESTINATION}
  PRE_BUILD
  OUTPUT "${PYTHON_PACKAGE_INIT_FILE_DESTINATION}"
  COMMENT  "creating __init__.py file ({event: PRE_BUILD}, {filename: __init__.py})"
)
add_custom_target ("generate___init__.py" DEPENDS "${PYTHON_PACKAGE_INIT_FILE_DESTINATION}")
add_dependencies (pybindings "generate___init__.py")

# Create the Python setup.py file.
configure_file(setup.py staged_setup.py @ONLY)
list(APPEND ADDITIONAL_GENERATED_FILES "${CMAKE_CURRENT_BINARY_DIR}/staged_setup.py")

add_custom_command (
    COMMAND ${CMAKE_COMMAND} "-E" "copy_if_different" "staged_setup.py" "${PYTHON_SETUP_FILE_DESTINATION}"
    VERBATIM
    PRE_BUILD
    DEPENDS  "staged_setup.py"
    OUTPUT   "${PYTHON_SETUP_FILE_DESTINATION}"
    COMMENT  "creating setup.py file ({event: PRE_BUILD}, {filename: setup.py})"
)

#add_custom_target ("generate_setup.py" DEPENDS "${PYTHON_SETUP_FILE_DESTINATION}")
#add_dependencies (pybindings "generate_setup.py")

if (UNIX AND NOT APPLE)
  set(_GENERATOR_EXPRESSION_REPROSIM_C_SONAME $<TARGET_SONAME_FILE:reprosim_c>)
endif()

set(FINALISE_PYTHON_BINDINGS_SCRIPT ${CMAKE_CURRENT_SOURCE_DIR}/finalise_python_package.cmake)

add_custom_command(TARGET pybindings POST_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:reprosim_c> ${_GENERATOR_EXPRESSION_REPROSIM_C_SONAME} ${PYTHON_PACKAGE_DIR}
  COMMAND ${CMAKE_COMMAND} ${FINALISE_PYTHON_BINDINGS_ARGUMENTS} -P ${FINALISE_PYTHON_BINDINGS_SCRIPT}
  COMMENT "Finalise preparation of reprosim Python bindings."
)

set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES "${ADDITIONAL_GENERATED_FILES}")
